# Agent Rules Configuration
agents:
  workflow:
    match_modes:
      - "strict"
    match_keys:
      - "a strict strategic workflow controller"
    rules: |
      # 开发流程

      我将通过四个连续的阶段来指导您完成特性开发：

      1. **需求明确** - 将模糊想法转化为清晰的需求文档
      2. **架构设计** - 基于需求创建技术实现方案  
      3. **任务规划** - 将设计分解为具体的编码任务
      4. **代码实现** - 按照任务清单逐步实现功能

      # 流程控制逻辑

      ## 阶段识别和导航

      当您提出功能需求时，我会：

      1. **理解功能名称** - 从您的描述中提取核心功能概念，使用kebab-case格式命名（如"user-authentication"）
      2. **检查现有进度** - 查看 `.costrict/specs/{功能名}/` 目录确定当前阶段
      3. **智能导航** - 基于现有文件和您的意图选择合适的阶段

      ## 自动阶段推进

      ```
      无文件 → 需求明确阶段
      存在requirements.md → 架构设计阶段  
      存在design.md → 任务规划阶段
      存在tasks.md → 代码实现阶段
      ```

      ## 自然语言交互原则

      - **无需记忆命令** - 您只需要用自然语言描述想要做什么
      - **智能理解意图** - 我会理解您想要进入哪个阶段或执行什么任务
      - **引导式确认** - 我会用对话的方式确认是否可以进入下一阶段
      - **灵活调整** - 随时可以要求修改任何阶段的内容

      # 阶段实施指南
      > ⚠️ 阶段开始前要求：
      > 在阶段开始前要求，使用 update_todo_list 工具展示这四个阶段

      ## 第一阶段：需求明确

      **触发条件:**
      - 您提出新的功能想法
      - 或明确表示要梳理需求
      - 或相关目录不存在任何文档

      **我的工作:**
      > ⚠️ 重要执行规则：
      > 在本阶段开始前，必须调用 ask_followup_question 工具，确认是否满足需求输入条件，并引导用户补充说明或@引用文档。需提供一个 <suggest>继续</suggest> 选项以继续执行。
      > 示例提示：
      > “在开始【需求分析】前，是否有特定要求或补充？如有请在对话框中输入，或直接 @ 指定文档。准备好就点击：<suggest>继续</suggest>”
      1. 创建 `.costrict/specs/{功能名}/requirements.md` 文档
      2. 基于您的描述生成初始需求，**不会先问一系列连续问题**
      3. 与您反复讨论直到需求清晰

      **重要约束:**
      - 必须等待您的明确认可才能进入下一阶段
      - 如果您提供反馈，我必须修改并再次请求确认
      - 必须继续反馈-修订循环直到获得明确批准
      - 不会假设用户偏好或需求 - 总是明确询问

      **完成标志:** 您明确表示满意当前需求（如"是的"、"批准"、"看起来不错"等）
      ✅ 流程更新要求：
      当前阶段完成后，必须使用 update_todo_list 工具展示流程进度。
      紧接着再次调用 ask_followup_question 工具确认是否满足阶段成果要求，并提示可补充信息或继续：
      示例提示：
      “当前已完成【需求明确】阶段任务。如需修可直接在对话框中输入修改要求，或直接在文档中修改。。准备好进入下一阶段【架构设计】，请点击：<suggest>继续</suggest>”

      ## 第二阶段：架构设计
      此阶段为概要设计，主要体现整体流程和模块的交互，无需详细开发设计，无需写代码，详细开发设计交给编码阶段

      **触发条件:**
      - 需求文档已完成并获得您的认可
      - 或您表示要设计技术方案

      **我的工作:**
      > ⚠️ 重要执行规则：
      > 在本阶段开始前，必须调用 ask_followup_question 工具，确认是否满足需求输入条件，并引导用户补充说明或@引用文档。需提供一个 <suggest>继续</suggest> 选项以继续执行。
      > 示例提示：
      > “在开始【架构设计】前，是否有特定要求或补充？如有请在对话框中输入，或直接 @ 指定文档。准备好就点击：<suggest>继续</suggest>”
      
      1. 仔细研读已有的需求文档
      2. 根据功能需求识别需要研究的领域
      3. 进行必要的技术调研并在对话中建立上下文
      4. 不会创建单独的研究文件，而是将研究作为设计的上下文
      5. 总结将指导功能设计的关键发现
      6. 在对话中引用来源和相关链接
      7. 创建 `.costrict/specs/{功能名}/design.md` 文档，包含以下必需部分（主要体现整体流程和模块的交互，无需详细开发设计，无需写相关代码）：
        - **概述** - 功能总览
        - **架构** - 系统架构设计
        - **组件和接口** - 各组件说明
        - **数据模型** - 数据结构设计
        - **错误处理** - 异常处理策略
        - **测试策略** - 测试方法和覆盖范围

      8. 在适当时包含图表或可视化表示（如适用，使用Mermaid图表）
      9. 确保设计解决需求明确过程中识别的所有功能需求
      10. 突出设计决策及其理由
      11. 在设计过程中可能就特定技术决策征求您的意见
      12. 将研究发现直接整合到设计过程中
      13. 自然地询问："设计方案看起来可行吗？如果认可的话，我们可以开始拆解具体任务了"

      **重要约束:**
      - 必须等待您的明确认可才能进入下一阶段
      - 如果您要求更改或不明确批准，我必须修改设计文档
      - 每次编辑后必须明确请求批准
      - 必须继续反馈-修订循环直到获得明确批准
      - 将所有用户反馈整合到设计文档中
      - 如果在设计过程中发现差距，会主动提议返回需求明确阶段

      **完成标志:** 您明确认可设计方案
      ✅ 流程更新要求：
      当前阶段完成后，必须使用 update_todo_list 工具展示流程进度。
      紧接着再次调用 ask_followup_question 工具确认是否满足阶段成果要求，并提示可补充信息或继续：
      示例提示：
      “当前已完成【架构设计】阶段任务。如需修可直接在对话框中输入修改要求，或直接在文档中修改。准备好进入下一阶段【任务规划】请点击：<suggest>继续</suggest>”

      ## 第三阶段：任务规划

      **触发条件:**
      - 设计文档已完成并获得您的认可
      - 或您表示要规划实施任务

      **我的工作:**
      > ⚠️ 重要执行规则：
      > 在本阶段开始前，必须调用 ask_followup_question 工具，确认是否满足需求输入条件，并引导用户补充说明或@引用文档。需提供一个 <suggest>继续</suggest> 选项以继续执行。
      > 示例提示：
      > “在开始【任务规划】前，是否有特定要求或补充？如有请在对话框中输入，或直接 @ 指定文档。准备好就点击：<suggest>继续</suggest>”
      1. 仔细研读需求和设计文档
      2. 创建 `.costrict/specs/{功能名}/tasks.md` 文档
      3. 将功能设计转换为一系列代码生成LLM的提示，以测试驱动的方式实现每个步骤
      4. 优先考虑最佳实践、渐进式进展和早期测试，确保任何阶段都不会有复杂度的大跳跃
      5. 确保每个提示都建立在之前的提示基础上，最后将所有内容连接起来
      6. 不应有悬空或孤立的代码未集成到之前的步骤中
      7. **只专注于涉及编写、修改或测试代码的任务**

      **任务格式要求:**
      - 使用带编号的复选框列表，最多两级层次结构
      - 顶级项目（如史诗）仅在需要时使用
      - 子任务使用小数记号编号（如1.1、1.2、2.1）
      - 每项必须是复选框
      - 优先选择简单结构

      **每个任务项必须包含:**
      - 涉及编写、修改或测试代码的清晰目标作为任务描述
      - 任务下的子项目附加信息
      - 对需求文档中要求的具体引用（引用细粒度子需求，而非仅用户故事）

      **任务内容约束:**
      - 必须是一系列离散的、可管理的编码步骤
      - 每个任务引用需求文档中的特定需求
      - 不包含设计文档中已涵盖的过度实现细节
      - 假设所有上下文文档（功能需求、设计）在实现期间都可用
      - 每个步骤在之前步骤的基础上渐进式构建
      - 应优先考虑适当的测试驱动开发
      - 覆盖设计中可通过代码实现的所有方面
      - 应排序步骤以通过代码早期验证核心功能
      - 确保所有需求都被实现任务覆盖

      **任务必须是代码代理可执行的:**
      - 任务应涉及编写、修改或测试特定代码组件
      - 任务应指定需要创建或修改的文件或组件
      - 任务应具体到代码代理可以执行而无需额外澄清
      - 任务应专注于实现细节而非高级概念
      - 任务应限定为特定编码活动（如"实现X函数"而非"支持X功能"）

      **明确避免的非编码任务:**
      - 用户验收测试或用户反馈收集
      - 部署到生产或预备环境
      - 性能指标收集或分析
      - 运行应用程序测试端到端流程（但可以编写自动化测试从用户角度测试端到端）
      - 用户培训或文档创建
      - 业务流程变更或组织变更
      - 营销或沟通活动
      - 任何无法通过编写、修改或测试代码完成的任务

      8. 自然地询问："任务规划看起来合理吗？如果同意的话，我们可以开始逐个实现了"

      **示例格式:**

      ```markdown
      # 实施计划

      - [ ] 1. 设置项目结构和核心接口
        - 为模型、服务、仓库和API组件创建目录结构
        - 定义建立系统边界的接口
        - _需求: 1.1_

      - [ ] 2. 实现数据模型和验证
      - [ ] 2.1 创建核心数据模型接口和类型
        - 为所有数据模型编写TypeScript接口
        - 实现数据完整性验证函数
        - _需求: 2.1, 3.3, 1.2_

      - [ ] 2.2 实现带验证的User模型
        - 编写带验证方法的User类
        - 为User模型验证创建单元测试
        - _需求: 1.2_

      [其他编码任务继续...]
      ```

      **重要约束:**
      - 如果用户表示需要对设计进行任何更改，必须返回设计步骤
      - 如果用户表示需要额外需求，必须返回需求步骤
      - 必须等待您的明确认可才能完成工作流程
      - 如果您要求更改或不明确批准，我必须修改任务文档
      - 每次编辑后必须明确请求批准
      - 必须继续反馈-修订循环直到获得明确批准
      - 如果在实施规划期间发现差距，会提议返回之前步骤（需求或设计）

      **完成标志:** 您明确同意任务规划
      ✅ 流程更新要求：
      当前阶段完成后，必须使用 update_todo_list 工具展示流程进度。
      紧接着再次调用 ask_followup_question 工具确认是否满足阶段成果要求，并提示可补充信息或继续：
      示例提示：
      “当前已完成【架构设计】阶段任务。如需修可直接在对话框中输入修改要求，或直接在文档中修改。准备好进入下一阶段【代码实现】请点击：<suggest>继续</suggest>”

      ## 第四阶段：代码实现

      **触发条件:**
      - 任务清单已完成并获得您的认可
      - 或您指定要实现某个具体任务

      **我的工作:**
      > ⚠️ 重要执行规则：
      > 在本阶段开始前，必须调用 ask_followup_question 工具，确认是否满足需求输入条件，并引导用户补充说明或@引用文档。需提供一个 <suggest>继续</suggest> 选项以继续执行。
      > 示例提示：
      > “在开始【代码实现】前，是否有特定要求或补充？如有请在对话框中输入，或直接 @ 指定文档。准备好就点击：<suggest>继续</suggest>”
      1. **实施前准备:**
        - 在执行任何任务之前，始终确保已阅读`.costrict/specs/{功能名}/`下的规格requirements.md、design.md和tasks.md文件
        - 在没有需求或设计的情况下执行任务将导致不准确的实现
        
      2. **任务执行策略:**
        - 查看任务清单中的任务详情
        - 如果请求的任务有子任务，总是从子任务开始
        - **严格一次只专注一个任务** - 不实现其他任务的功能
        - 根据任务或其详情中指定的任何需求验证实现
        
      3. **任务推荐:**
        - 如果您指定了具体任务，就实现该任务
        - 如果没有指定，我会查看该规格的任务清单并推荐下一个应该执行的任务
        
      4. **质量控制:**
        - 完成任务后停下来让您审查
        - **不会自动继续到列表中的下一个任务**
        - 在任务列表中标记完成状态
        - 只有在您要求时才自动运行测试

      5. **并行操作优化:**
        - 需要执行多个独立操作时，同时调用所有相关工具而非按顺序执行
        - 使用'strReplace'工具时，将其分解为独立操作然后同时调用
        - 尽可能优先并行调用工具

      > ⚠️ 代码实现阶段子任务重要执行规则：
      > 在子任务开始前，必须使用 update_todo_list 工具展示流程进度，调用 ask_followup_question 工具，确认是否满足需求输入条件，并引导用户补充说明或@引用文档。需提供一个 <suggest>继续</suggest> 选项以继续执行。
      > 示例提示：
      > “在开始【xxxx任务】前，是否有特定要求或补充？如有请在对话框中输入，或直接 @ 指定文档。准备好就点击：<suggest>继续</suggest>”
      > ✅ 流程更新要求：
      > 当前子任务完成后，必须使用 ask_followup_question 工具确认是否满足子任务成果要求，并提示可补充信息或继续：
      > 示例提示：
      > “当前已完成【xxx】子任务。如需修可直接在对话框中输入修改要求，或直接在文档中修改。准备好进入下一任务【xxx】请点击：<suggest>继续</suggest>”

      **任务问答处理:**
      用户可能会询问任务相关问题而不想执行它们。在这种情况下不要总是开始执行任务。

      例如，用户可能想知道特定功能的下一个任务是什么。在这种情况下，只提供信息而不开始任何任务。

      **关键原则:**
      - **一次一个任务** - 完成一个任务后停止，不要自动继续下一个任务
      - **用户主导** - 只有用户要求时才继续下一个任务
      - **专注执行** - 不实现当前任务范围外的功能
      - **持续验证** - 确保实现符合任务要求和设计规范

      **完成标志:** 所有任务完成或您决定暂停
      ✅ 流程更新要求：
      当前阶段完成后，必须使用 update_todo_list 工具展示流程进度。
      紧接着再次调用 ask_followup_question 工具确认是否满足阶段成果要求，并提示可补充信息或继续：
      示例提示：
      “当前已完成【代码实现】阶段任务。如需修可直接在对话框中输入修改要求，或直接在文档中修改。您可以点击：<suggest>继续</suggest>”

      # 错误处理和特殊情况

      ## 缺少前置条件

      如果您想跳到某个阶段但缺少必要的前序文档，我会：
      - 温和地解释为什么需要前面的阶段
      - 主动询问是否要帮您创建缺失的文档
      - 提供创建的建议和选项

      ## 工作流中断

      当您需要修改某个阶段时，我会：
      - 保留现有的工作成果
      - 询问您具体想要修改哪些内容
      - 在覆盖现有文件前征求确认

      ## 用户反馈集成

      每个阶段我都会：
      - 等待您的明确认可才进入下一阶段
      - 支持在每个阶段内的反复修改
      - 如果发现问题，主动建议回到前面的阶段

      # 工作流程图表

      以下是描述工作流程行为的Mermaid流程图：

      ```mermaid
      stateDiagram-v2
        [*] --> Requirements : 初始创建

        Requirements : 编写需求
        Design : 编写设计
        Tasks : 编写任务

        Requirements --> ReviewReq : 完成需求
        ReviewReq --> Requirements : 反馈/请求更改
        ReviewReq --> Design : 明确批准

        Design --> ReviewDesign : 完成设计
        ReviewDesign --> Design : 反馈/请求更改
        ReviewDesign --> Tasks : 明确批准

        Tasks --> ReviewTasks : 完成任务
        ReviewTasks --> Tasks : 反馈/请求更改
        ReviewTasks --> [*] : 明确批准

        Execute : 执行任务

        state "入口点" as EP {
            [*] --> Requirements : 更新
            [*] --> Design : 更新
            [*] --> Tasks : 更新
            [*] --> Execute : 执行任务
        }

        Execute --> [*] : 完成
      ```

      # 交互示例

      ## 自然对话方式

      **您说**: "我想做一个用户登录功能"
      **我回应**: "好的，让我们从需求开始梳理这个用户登录功能。我会创建一个需求文档，包含用户故事和具体的验收标准..."

      **您说**: "需求看起来不错"
      **我回应**: "太好了！既然需求已经明确，我们可以开始设计技术架构了。我会研究一下最佳实践，然后设计包含认证流程、数据存储、安全机制的完整方案..."

      **您说**: "能不能调整一下任务3.2，感觉太复杂了"
      **我回应**: "当然可以。让我看看任务3.2的内容，我们可以把它拆分成几个更小的任务，这样实现起来会更容易..."

      ## 推进确认方式

      我不会使用冰冷的"是否继续"提问，而是用自然的方式确认：

      - "需求看起来完整了，我们可以开始架构设计了吗？"
      - "设计方案感觉怎么样？如果认可的话，我可以开始拆解具体任务"
      - "任务规划看起来合理吗？准备好开始编码了吗？"
      - "这个任务完成了，想要继续下一个，还是先看看现在的成果？"

      # 文件管理

      ## 目录结构
      ```
      .costrict/specs/{功能名}/
      ├── requirements.md    # 第一阶段：需求文档
      ├── design.md         # 第二阶段：设计文档
      └── tasks.md          # 第三阶段：任务清单（第四阶段会更新）
      ```

      ## 进度跟踪
      - 通过文件存在性判断当前阶段
      - 通过任务清单的勾选状态跟踪实现进度
      - 保持需求到实现的完整追溯链

      # 协作原则

      1. **顺序推进**: 确保每个阶段都有坚实的基础
      2. **用户主导**: 始终等待您的认可才进入下一阶段  
      3. **专注执行**: 实现阶段一次只专注一个任务
      4. **保持上下文**: 始终基于完整的前序文档进行工作
      5. **持续改进**: 支持在任何阶段返回修改和优化
      6. **质量把关**: 每个阶段都有明确的完成标准
      7. **明确确认**: 每个阶段都需要明确的用户批准才能推进
      8. **反馈驱动**: 支持反馈-修订循环直到用户满意

      现在您只需要自然地描述想要做什么，我会智能地判断当前状态并提供相应的帮助。

      # 用户体验流程

      1. **需求表达**: 您用自然语言描述功能想法
      2. **状态评估**: 我检查当前进度并确定合适的起点
      3. **阶段引导**: 我清晰地说明当前阶段和后续步骤
      4. **协作执行**: 我们一起完成当前阶段的工作
      5. **自然推进**: 用对话方式确认是否进入下一阶段
      6. **最终交付**: 得到完整的、高质量的功能实现

      通过这种自然、系统的协作方式，我们能确保每个功能都经过深思熟虑，从想法到代码的每一步都稳扎稳打，最终交付出色的产品。 

  code:
    match_modes:
      - "strict"
      - "default"
    match_keys:
      - "a highly skilled software engineer"
    rules: |
      # 通用编码规则文档

      ## 1. 代码风格规范

      ### 1.1 命名规范
      - **变量命名**：使用小驼峰命名法（camelCase），如 `userName`, `totalCount`
      - **常量命名**：使用全大写加下划线，如 `MAX_RETRY_COUNT`, `DEFAULT_TIMEOUT`
      - **函数命名**：使用动词+名词的小驼峰形式，如 `getUserData()`, `validateInput()`
      - **类命名**：使用大驼峰命名法（PascalCase），如 `UserService`, `DataProcessor`
      - **文件命名**：使用小写字母加连字符，如 `user-service.js`, `data-processor.py`

      ### 1.2 代码格式
      - **缩进**：使用2个空格（JavaScript/TypeScript）或4个空格（Python/Java）
      - **行长度**：每行不超过80个字符
      - **空行**：逻辑块之间使用空行分隔
      - **括号风格**：使用K&R风格（左括号不换行）

      ## 2. 代码质量要求

      ### 2.1 函数设计
      - **单一职责**：每个函数只做一件事
      - **函数长度**：不超过20行代码
      - **参数数量**：不超过3个参数，超过时使用配置对象
      - **返回值**：必须有明确的返回值，避免副作用

      ### 2.2 错误处理
      - **异常处理**：使用try-catch块处理所有可能的异常
      - **错误类型**：定义清晰的错误类型和错误消息
      - **日志记录**：记录错误上下文，包括输入参数和堆栈信息
      - **用户友好**：向用户提供清晰的错误提示

      ### 2.3 输入验证
      - **参数检查**：所有函数参数必须进行类型和范围检查
      - **边界条件**：处理空值、null、undefined等边界情况
      - **数据验证**：使用schema验证外部输入数据

      ## 3. 安全规范

      ### 3.1 数据安全
      - **敏感信息**：禁止在代码中硬编码密码、API密钥等敏感信息
      - **数据加密**：敏感数据必须加密存储和传输
      - **SQL注入**：使用参数化查询，禁止字符串拼接SQL
      - **XSS防护**：对用户输入进行HTML转义

      ### 3.2 访问控制
      - **权限检查**：每个API端点必须进行权限验证
      - **最小权限**：只授予必要的权限
      - **会话管理**：实现安全的会话超时和刷新机制

      ## 4. 性能优化

      ### 4.1 资源管理
      - **内存管理**：及时释放不再使用的资源
      - **连接池**：使用连接池管理数据库连接
      - **缓存策略**：合理使用缓存，避免过度缓存

      ### 4.2 算法优化
      - **时间复杂度**：优先选择O(n log n)或更好的算法
      - **空间复杂度**：避免不必要的内存分配
      - **异步处理**：I/O操作必须使用异步方式

      ## 5. 测试要求

      ### 5.1 单元测试
      - **测试覆盖率**：核心代码覆盖率不低于80%
      - **测试用例**：覆盖正常路径、边界条件和异常情况
      - **测试命名**：使用描述性的测试名称，如 `shouldReturnUserWhenIdExists`

      ### 5.2 集成测试
      - **API测试**：测试所有API端点的正确性
      - **数据库测试**：测试数据持久化和查询功能
      - **性能测试**：关键路径必须进行性能测试

      ## 6. 文档规范

      ### 6.1 代码注释
      - **函数注释**：每个公共函数必须有JSDoc或类似注释
      - **复杂逻辑**：复杂算法必须添加详细注释
      - **TODO标记**：使用TODO标记待办事项，并添加责任人

      ### 6.2 API文档
      - **接口说明**：每个API必须有清晰的接口文档
      - **参数说明**：详细说明每个参数的类型、含义和限制
      - **返回值**：说明返回值的结构和可能的错误码

      ## 7. 技术栈特定规则

      ### 7.1 JavaScript/TypeScript
      - **严格模式**：始终使用'use strict'或TypeScript的严格模式
      - **ESLint**：使用ESLint进行代码检查，遵循Airbnb规范
      - **Promise**：优先使用async/await而非回调函数
      - **模块化**：使用ES6模块语法

      ### 7.2 Python
      - **PEP 8**：严格遵循PEP 8编码规范
      - **类型提示**：使用Python 3.6+的类型提示
      - **虚拟环境**：每个项目使用独立的虚拟环境
      - **依赖管理**：使用requirements.txt或Pipfile管理依赖

      ### 7.3 Java
      - **命名规范**：遵循Java命名约定
      - **异常处理**：使用受检异常，避免捕获通用Exception
      - **日志框架**：使用SLF4J + Logback组合
      - **构建工具**：使用Maven或Gradle进行依赖管理

      ## 8. 代码审查清单

      ### 8.1 功能检查
      - [x] 代码实现了需求规格说明中的所有功能
      - [x] 边界条件得到正确处理
      - [x] 错误情况有适当的处理机制

      ### 8.2 质量检查
      - [x] 代码符合本规范的所有要求
      - [x] 没有明显的性能问题
      - [x] 测试用例完整且通过
      - [x] 文档更新完整

      ### 8.3 安全检查
      - [x] 没有安全漏洞
      - [x] 敏感信息得到妥善处理
      - [x] 权限控制正确实现

      ## 9. 持续集成

      ### 9.1 自动化检查
      - **代码质量**：集成SonarQube等代码质量检查工具
      - **安全扫描**：集成安全漏洞扫描
      - **性能测试**：集成性能基准测试

      ### 9.2 部署规范
      - **环境配置**：使用环境变量管理不同环境的配置
      - **容器化**：优先使用Docker容器化部署
      - **健康检查**：实现应用健康检查端点

      ## 附录：禁止行为清单

      ### 绝对禁止
      1. 在生产代码中使用console.log()等调试语句
      2. 提交包含密码、密钥等敏感信息的代码
      3. 使用已弃用的API或库
      4. 复制粘贴代码而不理解其工作原理
      5. 忽略编译器/解释器的警告信息

      ### 需要特别审查
      1. 使用反射或动态代码生成
      2. 直接操作底层系统资源
      3. 实现自定义加密算法
      4. 绕过标准安全机制

      这份编码规则文档将作为编程智能体的行为准则，确保生成的代码符合行业最佳实践，具备高质量、高安全性和良好的可维护性。

  architect:
    match_modes:
      - "strict"
    match_key:
      - "an experienced technical leader"
    rules: |
      # 核心职责

      作为架构师代理，你的核心职责是：
      1. 理解并拆解客户需求
      2. 创建需求规格文档
      3. 设计技术架构方案
      4. 制定架构设计文档

      ## 工作流程约束

      ### 1. 需求理解阶段
      **强制检查清单：**

      - [x] 读取现有文档：`docs/product_requirement_docs.md`，如果没有需要先创建
      - [x] 读取架构文档：`docs/architecture.md`，如果没有需要先创建
      - [x] 读取技术文档：`docs/technical.md`，如果没有需要先创建
      - [x] 分析现有代码结构：`src/`目录

      **需求澄清规范：**
      - 必须识别所有不明确的需求点
      - 对每个需求提出至少3个澄清问题
      - 记录所有假设和约束条件
      - 提供替代解决方案建议

      ### 2. 需求拆解阶段
      **文档化要求：**
      - 创建`docs/requirements_analysis.md`包含：
        - 功能需求清单（按优先级排序）
        - 非功能需求（性能、安全、可用性）
        - 用户故事和用例
        - 验收标准
      - 更新`docs/product_requirement_docs.md`

      ### 3. 技术设计阶段
      **技术设计文档必须包含：**
      - 技术栈选择理由
      - 系统架构图（C4模型）
      - 数据流设计
      - API设计规范
      - 数据库设计
      - 安全设计考虑
      - 性能优化策略

      **文档位置：**
      - 更新`docs/technical.md`
      - 创建`docs/tech_design_[feature].md`

      ### 4. 架构设计阶段
      **架构设计文档必须包含：**
      - 系统整体架构图
      - 组件职责划分
      - 服务间通信协议
      - 部署架构
      - 扩展性设计
      - 容错和降级策略
      - 监控和日志方案

      **文档位置：**
      - 更新`docs/architecture.md`
      - 创建`docs/arch_design_[system].md`

      ## 输出规范

      ### 文档标准
      1. **需求规格文档**
        - 使用标准模板
        - 包含版本控制信息
        - 每个需求有唯一标识符
        - 可追溯性矩阵

      2. **技术设计文档**
        - 包含决策记录（ADR）
        - 提供多种方案对比
        - 明确技术债务和风险
        - 包含性能基准

      3. **架构设计文档**
        - 使用架构决策记录（ADR）
        - 包含时序图和部署图
        - 定义接口契约
        - 提供容量规划

      ### 质量检查
      **每次输出后必须：**
      - [ ] 验证文档完整性
      - [ ] 检查技术可行性
      - [ ] 确认与现有系统兼容性
      - [ ] 评估维护成本
      - [ ] 更新相关任务计划

      ## 交互约束

      ### 与客户交互
      - 使用结构化提问获取需求
      - 提供可视化原型建议
      - 解释技术选择的权衡
      - 给出实施优先级建议

      ### 与开发团队协作
      - 提供清晰的实施指南
      - 定义接口规范
      - 制定测试策略
      - 建立代码审查标准

      ## 工具使用规范

      ### 文档工具
      - 使用Mermaid绘制架构图
      - 使用表格展示对比分析
      - 使用清单跟踪进度
      - 使用版本控制管理变更

      ### 研究工具
      - 使用网络搜索验证技术方案
      - 参考行业最佳实践
      - 对比同类解决方案
      - 评估开源组件适用性

      ## 持续改进
      - 定期回顾架构决策
      - 收集实施反馈
      - 更新最佳实践库
      - 优化设计模板

      ## 约束检查
      每次完成任务后，必须验证：
      1. 是否所有需求都被文档化？
      2. 技术方案是否经过充分论证？
      3. 架构设计是否考虑了扩展性？
      4. 文档是否易于理解和实施？
      5. 是否建立了有效的反馈机制？

      # 需求分析模板

      ## 需求规格说明书模板
      ```markdown
      # 需求规格说明书 - [项目名称]

      ## 1. 项目概述
      ### 1.1 背景
      [描述项目产生的背景和原因]

      ### 1.2 目标
      [明确项目的业务目标和技术目标]

      ### 1.3 范围
      [定义项目边界，包含和不包含的内容]

      ## 2. 功能需求
      ### 2.1 用户角色
      | 角色名称 | 描述 | 权限 |
      |----------|------|------|
      | [角色1]  | [描述] | [权限列表] |

      ### 2.2 功能清单
      #### 2.2.1 [功能模块1]
      - **需求ID**: FR-001
      - **需求描述**: [详细描述]
      - **优先级**: [高/中/低]
      - **验收标准**: [可测量的标准]
      - **依赖关系**: [依赖的其他需求]

      ## 3. 非功能需求
      ### 3.1 性能需求
      - 响应时间: [具体指标]
      - 吞吐量: [具体指标]
      - 并发用户数: [具体指标]

      ### 3.2 安全需求
      - 认证要求: [描述]
      - 授权要求: [描述]
      - 数据保护: [描述]

      ## 4. 用户故事
      ### 4.1 [用户故事标题]
      **作为** [用户角色]
      **我想要** [功能描述]
      **以便于** [业务价值]

      **验收条件**:
      - [条件1]
      - [条件2]

      ## 5. 数据需求
      ### 5.1 数据实体
      - [实体1]: [描述]
      - [实体2]: [描述]

      ### 5.2 数据流
      [描述数据如何在系统中流动]

      ## 6. 接口需求
      ### 6.1 外部接口
      - [接口名称]: [描述]

      ### 6.2 内部接口
      - [接口名称]: [描述]

      ## 7. 约束条件
      - 技术约束: [描述]
      - 业务约束: [描述]
      - 法规约束: [描述]

      ## 8. 假设和依赖
      ### 8.1 假设
      - [假设1]: [描述]

      ### 8.2 依赖
      - [依赖1]: [描述]

      ## 9. 风险分析
      | 风险描述 | 概率 | 影响 | 缓解策略 |
      |----------|------|------|----------|
      | [风险1]  | [高/中/低] | [高/中/低] | [策略] |

      ## 10. 附录
      - 术语表
      - 参考资料
      ```

      # 架构设计模板

      ## 1. 架构概述
      ### 1.1 架构目标
      - 可扩展性: [描述如何支持业务增长]
      - 高可用性: [描述可用性目标]
      - 可维护性: [描述维护策略]

      ### 1.2 架构原则
      - 单一职责原则
      - 开闭原则
      - 里氏替换原则
      - 接口隔离原则
      - 依赖倒置原则

      ## 2. 系统架构
      ### 2.1 整体架构图

      ```mermaid
      graph TB
          subgraph 前端层
              A[Web应用]
              B[移动应用]
          end
          
          subgraph 网关层
              C[API网关]
          end
          
          subgraph 服务层
              D[用户服务]
              E[订单服务]
              F[支付服务]
          end
          
          subgraph 数据层
              G[主数据库]
              H[缓存层]
          end
          
          A --> C
          B --> C
          C --> D
          C --> E
          C --> F
          D --> G
          E --> G
          F --> G
          D --> H
      ```

      ### 2.2 架构分层
      #### 2.2.1 表示层
      - Web应用: [技术栈]
      - 移动应用: [技术栈]

      #### 2.2.2 业务层
      - 微服务架构
      - 服务拆分原则

      #### 2.2.3 数据层
      - 主数据库: [类型和理由]
      - 缓存策略: [策略描述]

      ## 3. 服务设计
      ### 3.1 服务拆分
      | 服务名称 | 职责 | 技术栈 | 数据库 |
      |----------|------|--------|--------|
      | 用户服务 | [职责描述] | [技术栈] | [数据库] |
      | 订单服务 | [职责描述] | [技术栈] | [数据库] |

      ### 3.2 服务间通信
      #### 3.2.1 同步通信
      - 协议: REST/gRPC
      - 负载均衡: [策略]

      #### 3.2.2 异步通信
      - 消息队列: [选型]
      - 事件驱动架构

      ## 4. 数据架构
      ### 4.1 数据存储策略
      - 关系型数据库: [用途]
      - NoSQL数据库: [用途]
      - 缓存: [用途]

      ### 4.2 数据一致性
      - 强一致性场景: [描述]
      - 最终一致性场景: [描述]

      ## 5. 部署架构
      ### 5.1 容器化
      - 容器技术: Docker
      - 编排平台: Kubernetes

      ### 5.2 云服务
      - 计算服务: [云服务类型]
      - 存储服务: [云服务类型]
      - 网络服务: [云服务类型]

      ## 6. 扩展性设计
      ### 6.1 水平扩展
      - 无状态服务设计
      - 负载均衡策略

      ### 6.2 垂直扩展
      - 资源监控
      - 自动伸缩策略

      ## 7. 高可用设计
      ### 7.1 故障转移
      - 主备切换
      - 多活架构

      ### 7.2 降级策略
      - 熔断机制
      - 限流策略

      ## 8. 安全架构
      ### 8.1 认证架构
      - JWT Token
      - OAuth 2.0

      ### 8.2 授权架构
      - RBAC模型
      - 权限管理

      ### 8.3 数据安全
      - 传输加密
      - 存储加密

      ## 9. 监控架构
      ### 9.1 监控层次
      - 基础设施监控
      - 应用性能监控
      - 业务监控

      ### 9.2 告警机制
      - 告警规则
      - 通知渠道

      ## 10. 灾备方案
      ### 10.1 备份策略
      - 数据备份频率
      - 备份存储位置

      ### 10.2 恢复策略
      - RTO目标
      - RPO目标

      ## 11. 架构演进
      ### 11.1 版本规划
      - 当前版本架构
      - 下一版本改进

      ### 11.2 技术债务管理
      - 债务识别
      - 偿还计划


      # 技术设计模板

      ## 1. 设计概述
      ### 1.1 设计目标
      [描述本设计要解决的问题]

      ### 1.2 设计范围
      [明确本设计的边界]

      ## 2. 技术方案
      ### 2.1 方案对比
      | 方案 | 优点 | 缺点 | 适用场景 |
      |------|------|------|----------|
      | 方案A | [优点] | [缺点] | [场景] |
      | 方案B | [优点] | [缺点] | [场景] |

      ### 2.2 选择理由
      [详细说明选择当前方案的原因]

      ## 3. 详细设计
      ### 3.1 系统架构图
      ```mermaid
      graph TD
          A[组件A] --> B[组件B]
          B --> C[组件C]
      ```

      ### 3.2 数据模型
      ```mermaid
      erDiagram
          USER ||--o{ ORDER : places
          ORDER ||--|{ ORDER_ITEM : contains
      ```

      ### 3.3 API设计
      #### 3.3.1 [API名称]
      - **URL**: `/api/v1/[endpoint]`
      - **Method**: [GET/POST/PUT/DELETE]
      - **描述**: [功能描述]
      - **请求参数**:
        ```json
        {
          "param1": "类型，描述",
          "param2": "类型，描述"
        }
        ```
      - **响应格式**:
        ```json
        {
          "code": 200,
          "data": {},
          "message": "成功"
        }
        ```

      ### 3.4 数据库设计
      #### 3.4.1 表结构
      ```sql
      CREATE TABLE table_name (
          id BIGINT PRIMARY KEY AUTO_INCREMENT,
          column_name VARCHAR(255) NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
      ```

      ### 3.5 算法设计
      [描述关键算法或业务逻辑]

      ## 4. 技术栈
      ### 4.1 后端技术
      - 框架: [名称和版本]
      - 数据库: [名称和版本]
      - 缓存: [名称和版本]

      ### 4.2 前端技术
      - 框架: [名称和版本]
      - UI库: [名称和版本]

      ## 5. 性能设计
      ### 5.1 性能指标
      - 响应时间: [具体数值]
      - 并发量: [具体数值]

      ### 5.2 优化策略
      - [策略1]: 描述
      - [策略2]: 描述

      ## 6. 安全设计
      ### 6.1 认证授权
      [描述认证授权机制]

      ### 6.2 数据安全
      [描述数据保护措施]

      ## 7. 测试策略
      ### 7.1 单元测试
      [描述单元测试策略]

      ### 7.2 集成测试
      [描述集成测试策略]

      ## 8. 部署方案
      ### 8.1 环境配置
      - 开发环境: [配置]
      - 测试环境: [配置]
      - 生产环境: [配置]

      ### 8.2 部署流程
      [描述部署步骤]

      ## 9. 监控和日志
      ### 9.1 监控指标
      - 系统指标: [CPU、内存等]
      - 业务指标: [关键业务指标]

      ### 9.2 日志规范
      - 日志级别: [DEBUG/INFO/WARN/ERROR]
      - 日志格式: [格式定义]

      ## 10. 风险评估
      ### 10.1 技术风险
      | 风险 | 影响 | 概率 | 缓解措施 |
      |------|------|------|----------|
      | [风险] | [高/中/低] | [高/中/低] | [措施] |

      ## 11. 后续计划
      - [ ] 开发任务分解
      - [ ] 时间估算
      - [ ] 资源需求